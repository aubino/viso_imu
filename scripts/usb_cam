#!/usr/bin/python3
import argparse
import sys
import os, time
import subprocess
from stereo_usb_driver import StereoRosWrapper , StereoUsbDriver
import roslibpy

argument_parser = argparse.ArgumentParser(description = "An entry point to launch the stereo camera driver")

argument_parser.add_argument("-v","--verbose",
                            help="Wether the driver should be verbose or not ",
                            type=bool,
                            default=False,
                            required=False)

argument_parser.add_argument("-c","--channel",
                            help=" Device channel. /dev/usb/video ",
                            type=int,
                            required=True)

argument_parser.add_argument("-W","--Width",
                            help=" Image width ",
                            type=int,
                            required=True)

argument_parser.add_argument("-H","--Height",
                            help=" Image Height ",
                            type=int,
                            required=True)

argument_parser.add_argument("-d","--debug",
                            help="Enables debug options.Displaying images is thus possible ",
                            type=bool,
                            default=False,
                            required=False)

argument_parser.add_argument("-u","--undistort",
                            help="Enables undistortion right away before eventually sending the images to ROS",
                            type=bool,
                            default=False,
                            required=False)

argument_parser.add_argument("-r","--ros",
                            help="Enables ros usage to publish ",
                            type=bool,
                            default=False,
                            required=False)

argument_parser.add_argument("--left-config",
    help="The yaml file containing calibration results and intrinsics for the left camera",
    type=str,
    default="",
    required=False
)

argument_parser.add_argument("--right-config",
    help="The yaml file containing calibration results and intrinsics for the left camera",
    type=str,
    default="",
    required=False
)

argument_parser.add_argument("--ros-config",
    help="The yaml file containing calibration results and intrinsics for the left camera",
    type=str,
    default="",
    required=False
)

if __name__ == "__main__" :
    arguments = argument_parser.parse_args()
    if not arguments.ros : 
        if not arguments.undistort :
            driver = StereoUsbDriver(arguments.channel,
                                    (arguments.Width,arguments.Height),
                                    verbose=arguments.verbose,
                                    debug=arguments.debug,
                                    )
            if driver.run_acquisition_loop() :
                print(" Application exited after execution or break requested ")
                exit(0)
                
        else : 
            if arguments.left_config == "" or arguments.right_config == "" :
                print("No argument was given as config file for cameras, while undistorsion has been requested. Exiting application ")
                exit(0)
            else : 
                driver = StereoUsbDriver(arguments.channel,
                                    (arguments.Width,arguments.Height),
                                    verbose=arguments.verbose,
                                    debug=arguments.debug,
                                    left_cfg=arguments.left_config,
                                    right_cfg=arguments.right_config,
                                    undistort=arguments.undistort
                                    )
                if driver.run_acquisition_loop() :
                    print(" Application exited after execution or break requested ")
                    exit(0)
    else :
        if os.path.isfile(arguments.ros_config) : 
            call_roscore = subprocess.Popen("roscore")
            time.sleep(2)
            subprocess.run(["rosparam","load","/home/aubin/viso_imu/config/usb_driver_ros_cfg.yaml","StereoRosWrapper"])
            ros_driver = StereoRosWrapper(arguments.channel,
                                            (arguments.Width,arguments.Height),
                                            left_cfg=arguments.left_config,
                                            right_cfg=arguments.right_config,
                                            undistort=arguments.undistort,
                                            verbose=arguments.verbose,
                                            debug=arguments.debug)
            ros_driver.loop()
        else : 
            print("The use of ROS was selected for the driver but no valid ros file config was given. Exciting...")
            exit(0)
    



